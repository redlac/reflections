What happens when you initialize a repository? Why do you need to do it?

All of the required git files are placed in the current directory. No commits are made automatically. The ".git" files are needed in order for the git commands to work.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an itermediate area between the working directory and the repository, it sets up which files are going to be commited. I think it's used as an organizational tool, so you don't have to commit single files one at a time to the repository, and can instead group related files together and commit them together.

How can you use the staging area to make sure you have one commit per logical change?

If you only commit one file from the staging area at a time to the repository, and only with one logical change. You can use the command "git diff --staging" to compare the files in the staging area and the latest commit in the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you wanted to make a major change to the files, making a new branch would allow you to change as much as you want in the repository without worrying about the ramifications to the rest of the files. It's easy to switch between branches, and thus easy to work on separate but similar versions of a project.

How do the diagrams help you visualize the branch structure?

It's easier to see where branches begin and end. It's also easy to see parent-child relationships of branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The branches are then merged into the one you currently have checkout out. The changes from both branches are combined together. The structure of the branches is like a tree, so representing it by drawing branches is the best way.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The merge conflicts prevent automatic merging. This will ensure that you always know exaclty what the differences are between two files with the same name in different branches, and can edit them accordingly. A con would be thatthe changes have to be dealt with manually, thus taking up time, rather than the computer figuring it out.
